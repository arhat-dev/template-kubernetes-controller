name: CI

on:
  check_run:
    types:
    - rerequested
    - requested_action
  pull_request:
    branches:
    - master
  push:
    branches:
    - master
    tags:
    - v*

env:
  GO111MODULE: "on"

jobs:
  stylecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - uses: github/super-linter@v3
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: "."

      # - name: Check commit
      #   uses: pre-commit/action@v2.0.0

      - name: Ensure tidy gomod
        run: |
          go mod download -x
          go mod tidy
          if ! git diff --exit-code
          then
            echo "go mod not tidy"
            exit 1
          fi

      - name: Lint
        uses: golangci/golangci-lint-action@v1
        with:
          version: v1.29
          args: --issues-exit-code=1
          only-new-issues: true

  unit-tests:
    needs:
    - stylecheck
    strategy:
      matrix:
        go-version: [1.14.x, 1.15.x]
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/checkout@v2
    - name: Test Packages
      run: |
        make test.pkg

    - name: Test Commands
      run: |
        make test.cmd

    - name: Report Test Coverage
      uses: codecov/codecov-action@v1
      # with:
      #   token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
      #   fail_ci_if_error: true # optional (default = false)

  build-linux-images:
    needs:
    - stylecheck
    - unit-tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build and Push Images
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        GITHUB_DOCKER_USERNAME: ${{ github.actor }}
        GITHUB_DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        IMAGE_REPOS: docker.io/arhatdev,docker.pkg.github.com/arhat-dev/template-kubernetes-controller
      run: |
        docker login docker.io -u="${DOCKERHUB_USERNAME}" -p="${DOCKERHUB_PASSWORD}"
        docker login docker.pkg.github.com -u="${GITHUB_DOCKER_USERNAME}" -p="${GITHUB_DOCKER_PASSWORD}"

        make image.build.linux.all
        make image.push.linux.all

  build-windows-images:
    needs:
    - stylecheck
    - unit-tests
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build and Push Images
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        GITHUB_DOCKER_USERNAME: ${{ github.actor }}
        GITHUB_DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        IMAGE_REPOS: docker.io/arhatdev,docker.pkg.github.com/arhat-dev/template-kubernetes-controller
      run: |
        docker login docker.io -u="${DOCKERHUB_USERNAME}" -p="${DOCKERHUB_PASSWORD}"
        docker login docker.pkg.github.com -u="${GITHUB_DOCKER_USERNAME}" -p="${GITHUB_DOCKER_PASSWORD}"

        make image.build.windows.all
        make image.push.windows.all

  e2e-tests:
    needs:
    - stylecheck
    - unit-tests
    - build-linux-images
    # TODO: uncomment this after for windows e2e tests
    # - build-windows-images
    strategy:
      matrix:
        kubernetes-version: [v1-16, v1-17, v1-18]
        # TODO: support windows e2e tests
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Add PATH
      run: |
        mkdir -p "${HOME}/bin"
        echo "::add-path::${HOME}/bin"

    - name: Install KinD
      run: |
        curl -Lo "${HOME}/bin/kind" https://kind.sigs.k8s.io/dl/v0.8.1/kind-linux-amd64
        chmod +x "${HOME}/bin/kind"

    # TODO: open source helm-stack
    # - name: Install helm-stack
    #   run: |
    #     curl -Lo "${HOME}/bin/helm-stack" https://
    #     chmod +x "${HOME}/bin/helm-stack"

    # TODO: enable e2e tests once helm-stack installed
    # - name: Test on Kubernetes ${{ matrix.kubernetes-version }}
    #   run: |
    #     make e2e.${{ matrix.kubernetes-version }}
